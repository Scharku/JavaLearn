package FullLesson;
class Lesson3 { 
    /* На 3 уроке изучается арифметические и логические операции, 
            а также операторы сравнения.
    */
    public static void main(String[] args) {
        int x = 5; int y = 9; 
        
        // Примеры, что можно делать с ПТД.
        int minus = x - y;
        int plus = x + y;
        int multiplication = x*y;
        int division = x / y;
        int WaT = x % y; // поиск остатка.
        
        x++; //увеличивает на 1 единицу после операции. Postfix
        ++x; //увеличивает на 1 единицу до операции. Prefix
        x--; //уменьшает на 1 единицу после операции. Postfix
        --x; //уменьшает на 1 единицу до операции. Prefix
        
    // Пример.
        int pr1 = 7; // в данный момент значение значение 7.
        System.out.println(pr1); //выведется 7.
        int pr2 = x + pr1++; /* pr2 = 5 + 7 = 12, но само значение pr1 ПОСЛЕ 
                                    станет равен 8. */
        System.out.println(pr2); //выведется 12.
        System.out.println(pr1); //выведется 8.
        int pr3 = x + ++pr1; /* pr2 = 5 + 9 = 13, значение pr1 равен 9 до 
                                    складывания. */
        System.out.println(pr3); //выведется 14.
        System.out.println(pr1); //выведется 9.
        
        /* Операторы присваивания.
        Если ставится =, то это присваивание, а = 5.
        Если ставится +=, то оно сначала увеличивает, затем присваивает, 
            например а = 4, а+=6, то а = 10.
        Аналогично с операторами -=, *=, /= 
        */
        
        /* Операторы сравнения.
        Если ставится ==, то это сравнение, 5 == 6.
        Операторы > < >= <= это операторы больше-меньше.
        Оператор != это НЕ равно.
        
        && - логический оператор И (Если есть несповпадение, тутже прекращает 
        работу).
        
        || - логический оператор ИЛИ (Если есть несповпадение, тутже прекращает 
        работу).
        
        ! - обратный оператор (НЕ)
        
        & - логический оператор И работает с побитовыми значениями, а не только
        с булевыми переменными. Также продолжает работу до конца.
        
        | - логический оператор ИЛИ работает с побитовыми значениями, а не
        только булевыми переменными. Также продолжает работу до конца.
        
        ^ - тоже оператор ИЛИ, но работает по другому принципу - выдает true 
        только тогда, когда ОДНА операнда true.
        
        */
    }
}